{
  "name": "vscode-electron-build-tools",
  "displayName": "Electron Build Tools",
  "publisher": "dsanders11",
  "description": "A collection of VS Code helpers related to developing the Electron project.",
  "icon": "resources/icons/electron_logo.png",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dsanders11/vscode-electron-build-tools.git"
  },
  "license": "MIT",
  "version": "0.0.0",
  "engines": {
    "node": ">=18",
    "vscode": "^1.96.0"
  },
  "activationEvents": [
    "workspaceContains:electron_resources.grd",
    "workspaceContains:electron/electron_resources.grd",
    "workspaceContains:typings/internal-electron.d.ts",
    "workspaceContains:electron/typings/internal-electron.d.ts"
  ],
  "categories": [
    "Extension Packs",
    "Linters",
    "Other"
  ],
  "keywords": [
    "Electron",
    "build-tools"
  ],
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": false,
      "description": "Electron build-tools is not supported in untrusted mode."
    },
    "virtualWorkspaces": {
      "supported": false,
      "description": "Electron build-tools is not supported in virtual workspaces."
    }
  },
  "contributes": {
    "chatParticipants": [
      {
        "id": "electron-build-tools",
        "name": "electron",
        "fullName": "Electron Build Tools",
        "description": "Ask about Electron",
        "when": "electron-build-tools:active",
        "commands": [
          {
            "name": "findUpstreamFiles",
            "description": "Attempt to find upstream Chromium files that Electron files are derived from."
          },
          {
            "name": "upgradesFindCL",
            "description": "Attempt to find the Chromium CL related to the current sync/build failure."
          },
          {
            "name": "upgradesFindCLAdvanced",
            "description": "Attempt to find the Chromium CL related to the current sync/build failure, with advanced options."
          },
          {
            "name": "searchCLs",
            "description": "Search Chromium CLs between two versions."
          }
        ]
      }
    ],
    "colors": [
      {
        "id": "electronBuildTools.gettingStartedIcon",
        "description": "Color for the \"Getting Started\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "debugIcon.pauseForeground",
          "highContrast": "debugIcon.pauseForeground",
          "light": "debugIcon.pauseForeground"
        }
      },
      {
        "id": "electronBuildTools.codeOfConductIcon",
        "description": "Color for the \"Code of Conduct\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "terminal.ansiYellow",
          "highContrast": "terminal.ansiYellow",
          "light": "terminal.ansiYellow"
        }
      },
      {
        "id": "electronBuildTools.contributingIcon",
        "description": "Color for the \"Contributing to Electron\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "debugIcon.startForeground",
          "highContrast": "debugIcon.startForeground",
          "light": "debugIcon.startForeground"
        }
      },
      {
        "id": "electronBuildTools.securityIssuesIcon",
        "description": "Color for the \"Reporting Security Issues\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "#cc6633",
          "highContrast": "#cc6633",
          "light": "#cc6633"
        }
      }
    ],
    "commands": [
      {
        "command": "electron-build-tools.build",
        "title": "Build",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:active && electron-build-tools:canBuild"
      },
      {
        "command": "electron-build-tools.buildAdvanced",
        "title": "Build (Advanced)",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:active && electron-build-tools:canBuild"
      },
      {
        "command": "electron-build-tools.newConfig",
        "title": "New Config",
        "category": "Electron Build Tools",
        "icon": "$(add)",
        "enablement": "electron-build-tools:canChangeConfig"
      },
      {
        "command": "electron-build-tools.patches.copyPath",
        "title": "Copy Path",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.copyRelativePath",
        "title": "Copy Relative Path",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.editFileInPatch",
        "title": "Edit File in Patch",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.open",
        "title": "Open Patch",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.openFileInPatch",
        "title": "Open File",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.refresh",
        "title": "Refresh Patches",
        "category": "Electron Build Tools",
        "icon": "$(refresh)",
        "enablement": "electron-build-tools:canRefreshPatches"
      },
      {
        "command": "electron-build-tools.patches.remove",
        "title": "Remove Patch",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.removeFileFromPatch",
        "title": "Remove File from Patch",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.patches.search",
        "title": "Search Patches",
        "category": "Electron Build Tools",
        "icon": "$(search)",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.removeConfig",
        "title": "Remove Config",
        "category": "Electron Build Tools",
        "icon": "$(trash)",
        "enablement": "viewItem == config"
      },
      {
        "command": "electron-build-tools.removePullRequestPatch",
        "title": "Remove Pull Request",
        "category": "Electron Build Tools",
        "icon": "$(x)"
      },
      {
        "command": "electron-build-tools.revealInElectronSidebar",
        "title": "Reveal in Electron Side Bar",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.run",
        "title": "Run",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.runLmTests",
        "title": "Run LM Tests",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:active && electron-build-tools:development-mode"
      },
      {
        "command": "electron-build-tools.sanitizeConfig",
        "title": "Sanitize Config",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.searchDocs",
        "title": "Search Docs",
        "category": "Electron Build Tools",
        "icon": "$(search)",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.showPatchesDocs",
        "title": "Show Patches Documentation",
        "category": "Electron Build Tools",
        "icon": "$(remote-explorer-documentation)",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.sync",
        "title": "Sync",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:build-tools-installed && electron-build-tools:canSync"
      },
      {
        "command": "electron-build-tools.sync.force",
        "title": "Force Sync",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:build-tools-installed && electron-build-tools:canSync"
      },
      {
        "command": "electron-build-tools.sync.advanced",
        "title": "Sync (Advanced)",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:build-tools-installed && electron-build-tools:canSync"
      },
      {
        "command": "electron-build-tools.useConfig",
        "title": "Use Config",
        "category": "Electron Build Tools",
        "icon": "$(check)",
        "enablement": "electron-build-tools:canChangeConfig && viewItem == config"
      },
      {
        "command": "electron-build-tools.useConfig.quickPick",
        "title": "Use Config",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:canChangeConfig"
      },
      {
        "command": "electron-build-tools.viewPullRequestPatch",
        "title": "Find Pull Request",
        "category": "Electron Build Tools",
        "icon": "$(search)"
      },
      {
        "command": "markdown.prettifyTable",
        "title": "Prettify Table",
        "enablement": "electron-build-tools:active && editorHasSelection"
      },
      {
        "command": "markdown.rewrapSelections",
        "title": "Rewrap Selections(s)",
        "enablement": "electron-build-tools:active && editorHasSelection"
      },
      {
        "command": "markdown.wrapLines",
        "title": "Wrap Line(s)",
        "enablement": "electron-build-tools:active && editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Electron Build Tools",
      "properties": {
        "electronBuildTools.build.buildOptions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "--no-remote": {
              "type": "string",
              "description": "Build without remote execution (entirely locally).",
              "enum": [
                ""
              ]
            },
            "--gen": {
              "type": "string",
              "description": "Force a re-run of `gn gen` before building.",
              "enum": [
                ""
              ]
            },
            "--target": {
              "type": "string",
              "description": "Forces a specific ninja target.",
              "minLength": 1
            }
          },
          "default": {},
          "description": "Options to use when building."
        },
        "electronBuildTools.build.defaultTarget": {
          "type": "string",
          "description": "Default target to build. Leave blank to use the config default.",
          "enum": [
            "----",
            "third_party/breakpad:dump_syms",
            "electron:electron_chromedriver_zip",
            "electron",
            "electron:electron_dist_zip",
            "electron:electron_mksnapshot_zip",
            "electron:node_headers"
          ],
          "default": "----"
        },
        "electronBuildTools.build.ninjaArgs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Args to pass to Ninja when building."
        },
        "electronBuildTools.build.showTargets": {
          "type": "boolean",
          "default": false,
          "description": "When building, show a list of build targets to choose from."
        },
        "electronBuildTools.chat.chromiumLogPageSize": {
          "type": "integer",
          "default": 15,
          "minimum": 1,
          "description": "Page size when searching the Chromium git log. Larger page sizes may cause the model to lose context."
        },
        "electronBuildTools.docs.lintRelativeLinks": {
          "type": "boolean",
          "default": true,
          "description": "Lint relative links in the docs and mark broken links as problems."
        },
        "electronBuildTools.sync.threeWayMerge": {
          "type": "boolean",
          "default": false,
          "description": "When syncing, use three-way merge."
        }
      }
    },
    "debuggers": [
      {
        "type": "electron.cpp.windows",
        "label": "Electron: C++ (Windows)",
        "languages": [
          "c",
          "cpp"
        ],
        "when": "electron-build-tools:ready && isWindows",
        "initialConfigurations": [
          {
            "name": "Electron: C++ (Windows)",
            "type": "cppvsdbg",
            "request": "launch",
            "program": "${command:electron-build-tools.show.exec}",
            "args": [
              "${command:electron-build-tools.debug.showOpenDialog}"
            ],
            "stopAtEntry": false,
            "cwd": "${command:electron-build-tools.show.root}\\src",
            "environment": [
              {
                "name": "ELECTRON_ENABLE_LOGGING",
                "value": "true"
              },
              {
                "name": "ELECTRON_ENABLE_STACK_DUMPING",
                "value": "true"
              },
              {
                "name": "ELECTRON_RUN_AS_NODE",
                "value": ""
              }
            ],
            "externalConsole": false,
            "sourceFileMap": {
              "o:\\": "${command:electron-build-tools.show.root}\\src"
            }
          },
          {
            "name": "Attach to Electron: C++ (Windows)",
            "type": "cppvsdbg",
            "request": "attach",
            "program": "${command:electron-build-tools.show.exec}",
            "MIMode": "lldb",
            "processId": "${command:pickProcess}",
            "sourceFileMap": {
              "o:\\": "${command:electron-build-tools.show.root}\\src"
            }
          }
        ]
      },
      {
        "type": "electron.cpp.lldb",
        "label": "Electron: C++ (lldb)",
        "languages": [
          "c",
          "cpp",
          "objective-c",
          "objective-cpp"
        ],
        "when": "electron-build-tools:ready && !isWindows",
        "hiddenWhen": "isLinux",
        "initialConfigurations": [
          {
            "name": "Electron: C++ (lldb)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${command:electron-build-tools.show.exec}",
            "args": [
              "${command:electron-build-tools.debug.showOpenDialog}"
            ],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
              {
                "name": "ELECTRON_ENABLE_LOGGING",
                "value": "true"
              },
              {
                "name": "ELECTRON_ENABLE_STACK_DUMPING",
                "value": "true"
              },
              {
                "name": "ELECTRON_RUN_AS_NODE",
                "value": ""
              }
            ],
            "MIMode": "lldb",
            "externalConsole": false,
            "setupCommands": [
              {
                "description": "Run Chromium lldbinit.py",
                "text": "command script import ${command:electron-build-tools.show.root}/src/tools/lldb/lldbinit.py"
              },
              {
                "description": "Load Blink lldb configuration",
                "text": "command script import ${command:electron-build-tools.show.root}/src/third_party/blink/tools/lldb/lldb_blink.py"
              }
            ],
            "sourceFileMap": {
              "../../": "${command:electron-build-tools.show.root}/src/",
              "gen/": "${command:electron-build-tools.show.out.path}/gen/"
            }
          },
          {
            "name": "Attach to Electron: C++ (lldb)",
            "type": "cppdbg",
            "request": "attach",
            "program": "${command:electron-build-tools.show.exec}",
            "MIMode": "lldb",
            "processId": "${command:pickProcess}",
            "setupCommands": [
              {
                "description": "Run Chromium lldbinit.py",
                "text": "command script import ${command:electron-build-tools.show.root}/src/tools/lldb/lldbinit.py"
              },
              {
                "description": "Load Blink lldb configuration",
                "text": "command script import ${command:electron-build-tools.show.root}/src/third_party/blink/tools/lldb/lldb_blink.py"
              }
            ],
            "sourceFileMap": {
              "../../": "${command:electron-build-tools.show.root}/src/",
              "gen/": "${command:electron-build-tools.show.out.path}/gen/"
            }
          }
        ]
      },
      {
        "type": "electron.cpp.gdb",
        "label": "Electron: C++ (gdb)",
        "languages": [
          "c",
          "cpp"
        ],
        "when": "electron-build-tools:ready && !isWindows",
        "hiddenWhen": "isMac",
        "initialConfigurations": [
          {
            "name": "Electron: C++ (gdb)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${command:electron-build-tools.show.exec}",
            "args": [
              "${command:electron-build-tools.debug.showOpenDialog}"
            ],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
              {
                "name": "ELECTRON_ENABLE_LOGGING",
                "value": "true"
              },
              {
                "name": "ELECTRON_ENABLE_STACK_DUMPING",
                "value": "true"
              },
              {
                "name": "ELECTRON_RUN_AS_NODE",
                "value": ""
              }
            ],
            "MIMode": "gdb",
            "externalConsole": false,
            "setupCommands": [
              {
                "description": "Load Chromium gdb configuration",
                "text": "-interpreter-exec console \"source -v ${command:electron-build-tools.show.root}/src/tools/gdb/gdbinit\""
              },
              {
                "description": "Load Blink gdb configuration",
                "text": "-interpreter-exec console \"python import sys; sys.path.insert(0, '${command:electron-build-tools.show.root}/src/third_party/blink/tools/gdb'); import blink\""
              }
            ],
            "sourceFileMap": {
              "../../": "${command:electron-build-tools.show.root}/src/",
              "gen/": "${command:electron-build-tools.show.out.path}/gen/"
            }
          },
          {
            "name": "Attach to Electron: C++ (gdb)",
            "type": "cppdbg",
            "request": "attach",
            "program": "${command:electron-build-tools.show.exec}",
            "MIMode": "gdb",
            "processId": "${command:pickProcess}",
            "setupCommands": [
              {
                "description": "Load Chromium gdb configuration",
                "text": "-interpreter-exec console \"source -v ${command:electron-build-tools.show.root}/src/tools/gdb/gdbinit\""
              },
              {
                "description": "Load Blink gdb configuration",
                "text": "-interpreter-exec console \"python import sys; sys.path.insert(0, '${command:electron-build-tools.show.root}/src/third_party/blink/tools/gdb'); import blink\""
              }
            ],
            "sourceFileMap": {
              "../../": "${command:electron-build-tools.show.root}/src/",
              "gen/": "${command:electron-build-tools.show.out.path}/gen/"
            }
          }
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "patches/config.json",
        "url": "./schemas/patches-config.schema.json"
      }
    ],
    "languages": [
      {
        "id": "python",
        "filenames": [
          "DEPS"
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "electron-build-tools_chromiumGitLog",
        "tags": [
          "chromium",
          "git",
          "log",
          "commits"
        ],
        "displayName": "Chromium Git Log",
        "modelDescription": "Retrieves the git log for Chromium between two versions",
        "inputSchema": {
          "type": "object",
          "properties": {
            "startVersion": {
              "type": "string",
              "description": "The starting version to retrieve the log for.",
              "examples": [
                "135.0.7016.3",
                "135.0.7049.1"
              ]
            },
            "endVersion": {
              "type": "string",
              "description": "The ending version to retrieve the log for.",
              "examples": [
                "135.0.7016.3",
                "135.0.7049.1"
              ]
            },
            "page": {
              "type": "integer",
              "description": "The page number of the log to retrieve.",
              "minimum": 1
            }
          }
        }
      },
      {
        "name": "electron-build-tools_chromiumGitShow",
        "tags": [
          "chromium",
          "git",
          "show",
          "commits"
        ],
        "displayName": "Chromium Git Show",
        "modelDescription": "Shows the log message and textual diff for a commit",
        "inputSchema": {
          "type": "object",
          "properties": {
            "commit": {
              "type": "string",
              "description": "The SHA for the commit to show.",
              "examples": [
                "26b69cddcef09655077629eeda8000f4ba621f5f"
              ]
            }
          },
          "required": [
            "commit"
          ]
        }
      },
      {
        "name": "electron-build-tools_gitLog",
        "tags": [
          "git",
          "log",
          "commits"
        ],
        "displayName": "Git Log",
        "modelDescription": "Retrieves the git log for a given filename",
        "inputSchema": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string",
              "description": "The filename to retrieve the git log for.",
              "examples": [
                "chrome/browser/icon_loader.cc",
                "components/autofill/core/browser/geo/autofill_country.h"
              ]
            }
          },
          "required": [
            "filename"
          ]
        }
      },
      {
        "name": "electron-build-tools_gitShow",
        "tags": [
          "git",
          "show",
          "commits"
        ],
        "displayName": "Git Show",
        "modelDescription": "Shows the log message and textual diff for a commit",
        "inputSchema": {
          "type": "object",
          "properties": {
            "commit": {
              "type": "string",
              "description": "The SHA for the commit to show.",
              "examples": [
                "26b69cddcef09655077629eeda8000f4ba621f5f"
              ]
            },
            "filename": {
              "type": "string",
              "description": "The filename to limit the textual diff to.",
              "examples": [
                "chrome/browser/icon_loader.cc",
                "electron/shell/utility/electron_content_utility_client.h"
              ]
            }
          },
          "required": [
            "commit",
            "filename"
          ]
        }
      }
    ],
    "markdown.markdownItPlugins": true,
    "menus": {
      "commandPalette": [
        {
          "command": "electron-build-tools.build",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.buildAdvanced",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.patches.copyPath",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.copyRelativePath",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.editFileInPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.open",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.openFileInPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.refresh",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.remove",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.removeFileFromPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.patches.search",
          "when": "electron-build-tools:active"
        },
        {
          "command": "electron-build-tools.removeConfig",
          "when": "false"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.revealInElectronSidebar",
          "when": "false"
        },
        {
          "command": "electron-build-tools.run",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.runLmTests",
          "when": "electron-build-tools:active && electron-build-tools:development-mode"
        },
        {
          "command": "electron-build-tools.sanitizeConfig",
          "when": "false"
        },
        {
          "command": "electron-build-tools.searchDocs",
          "when": "electron-build-tools:active"
        },
        {
          "command": "electron-build-tools.showPatchesDocs",
          "when": "false"
        },
        {
          "command": "electron-build-tools.sync",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.sync.advanced",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.useConfig",
          "when": "false"
        },
        {
          "command": "electron-build-tools.useConfig.quickPick",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.viewPullRequestPatch",
          "when": "false"
        },
        {
          "command": "markdown.prettifyTable",
          "when": "false"
        },
        {
          "command": "markdown.rewrapSelections",
          "when": "false"
        },
        {
          "command": "markdown.wrapLines",
          "when": "false"
        }
      ],
      "editor/context": [
        {
          "command": "markdown.prettifyTable",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        },
        {
          "command": "markdown.rewrapSelections",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        },
        {
          "command": "markdown.wrapLines",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        }
      ],
      "editor/title/context": [
        {
          "command": "electron-build-tools.revealInElectronSidebar",
          "group": "2_files@99",
          "when": "electron-build-tools:ready && resourceDirname =~ /.*electron(?:\\\\|\\/)patches(?:\\\\|\\/).*$/ && resourceExtname == .patch"
        }
      ],
      "explorer/context": [
        {
          "command": "electron-build-tools.revealInElectronSidebar",
          "group": "navigation@21",
          "when": "electron-build-tools:ready && resourceDirname =~ /.*electron(?:\\\\|\\/)patches(?:\\\\|\\/).*$/ && resourceExtname == .patch"
        }
      ],
      "view/item/context": [
        {
          "command": "electron-build-tools.patches.copyPath",
          "when": "view == electron-build-tools:patches && (viewItem == patch || viewItem === file-in-patch)",
          "group": "6_copypath"
        },
        {
          "command": "electron-build-tools.patches.copyRelativePath",
          "when": "view == electron-build-tools:patches && (viewItem == patch || viewItem === file-in-patch)",
          "group": "6_copypath"
        },
        {
          "command": "electron-build-tools.patches.editFileInPatch",
          "when": "view == electron-build-tools:patches && viewItem == file-in-patch",
          "group": "1_modification"
        },
        {
          "command": "electron-build-tools.patches.open",
          "when": "view == electron-build-tools:patches && viewItem == patch",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.patches.openFileInPatch",
          "when": "view == electron-build-tools:patches && viewItem == file-in-patch",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.patches.refresh",
          "when": "view == electron-build-tools:patches && viewItem == repo",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.patches.remove",
          "when": "view == electron-build-tools:patches && viewItem == patch",
          "group": "7_modification"
        },
        {
          "command": "electron-build-tools.patches.removeFileFromPatch",
          "when": "view == electron-build-tools:patches && viewItem == file-in-patch",
          "group": "1_modification"
        },
        {
          "command": "electron-build-tools.removeConfig",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.removeConfig",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == pull-request"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == pull-request",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.sanitizeConfig",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.useConfig",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.useConfig",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.viewPullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == view-pull-request-patch",
          "group": "inline"
        }
      ],
      "view/title": [
        {
          "command": "electron-build-tools.newConfig",
          "when": "view == electron-build-tools:configs",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.patches.refresh",
          "when": "view == electron-build-tools:patches",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.patches.search",
          "when": "view == electron-build-tools:patches",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.searchDocs",
          "when": "view == electron-build-tools:docs",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.showPatchesDocs",
          "when": "view == electron-build-tools:patches",
          "group": "navigation"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "electron",
        "source": "electron-build-tools",
        "label": "Electron Build Tools: Build Output",
        "fileLocation": [
          "relative",
          "${command:electron-build-tools.show.out.path}"
        ],
        "applyTo": "allDocuments",
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ],
    "snippets": [
      {
        "language": "typescript",
        "path": "./snippets/mocha-specs.json"
      }
    ],
    "taskDefinitions": [
      {
        "type": "electron-build-tools"
      }
    ],
    "views": {
      "electron-build-tools": [
        {
          "id": "electron-build-tools:welcome",
          "name": "Welcome",
          "when": "electron-build-tools:ready && !electron-build-tools:build-tools-installed"
        },
        {
          "id": "electron-build-tools:workspace",
          "name": "Workspace",
          "when": "electron-build-tools:ready && electron-build-tools:build-tools-installed && !electron-build-tools:is-electron-workspace"
        },
        {
          "id": "electron-build-tools:electron",
          "name": "Electron",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:configs",
          "name": "Configs",
          "contextualTitle": "Electron Build Tools Configs",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "id": "electron-build-tools:patches",
          "name": "Patches",
          "contextualTitle": "Electron Patches",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:docs",
          "name": "Electron Documentation",
          "contextualTitle": "Electron Documentation",
          "when": "!electron-build-tools:ready || electron-build-tools:active",
          "visibility": "collapsed"
        },
        {
          "id": "electron-build-tools:help",
          "name": "Help and Feedback",
          "contextualTitle": "Electron Build Tools Help and Feedback",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "electron-build-tools",
          "title": "Electron Build Tools",
          "icon": "resources/icons/electron-activitybar.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "electron-build-tools:configs",
        "contents": "No configs found."
      },
      {
        "view": "electron-build-tools:welcome",
        "contents": "In order to use the Electron Build Tools extension, you need the npm package @electron/build-tools, version 1.1.0 or newer, installed."
      },
      {
        "view": "electron-build-tools:workspace",
        "contents": "An Electron checkout wasn't found in this workspace.\n[Open Folder](command:vscode.openFolder)"
      }
    ]
  },
  "extensionPack": [
    "davidanson.vscode-markdownlint",
    "npclaudiu.vscode-gn",
    "Google.vscode-mojom"
  ],
  "main": "./out/main.js",
  "markdown": "github",
  "scripts": {
    "vscode:prepublish": "run-p \"esbuild:* -- {1}\" -- --minify",
    "esbuild": "run-p \"esbuild:* -- {1}\" -- --sourcemap",
    "watch": "run-p \"esbuild:* -- {1} {2}\" -- --sourcemap --watch",
    "esbuild:extension": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --external:original-fs --format=cjs --platform=node",
    "esbuild:list-tests": "esbuild ./electron/listMochaTests.ts --bundle --outfile=out/electron/listMochaTests.js --external:electron --format=cjs --platform=node",
    "esbuild:mocha-interface": "esbuild ./electron/mocha-interface.ts --bundle --outfile=out/electron/mocha-interface.js --format=cjs --platform=node",
    "esbuild:mocha-reporter": "esbuild ./electron/mocha-reporter.ts --bundle --outfile=out/electron/mocha-reporter.js --format=cjs --platform=node",
    "esbuild:ts-compiler": "esbuild ./electron/electron-build-tools-typescript.ts --bundle --outfile=out/electron/electron-build-tools-typescript.js --format=cjs --platform=node",
    "esbuild:echo-to-socket": "esbuild ./scripts/echo-to-socket.ts --bundle --outfile=out/scripts/echo-to-socket.js --format=cjs --platform=node",
    "esbuild:lm-tests": "esbuild ./lm-tests/*.ts --bundle --external:vscode --outdir=out/lm-tests/ --format=cjs --platform=node",
    "lint": "eslint electron src && yarn prettier:check",
    "prepare": "husky",
    "pretest": "yarn run esbuild && yarn run lint",
    "prettier:check": "prettier --check \"src/**/*.{ts,tsx}\" \"scripts/**/*.ts\" \"electron/**/*.ts\" \"lm-tests/**/*.ts\"",
    "prettier:write": "prettier --write \"src/**/*.{ts,tsx}\" \"scripts/**/*.ts\" \"electron/**/*.ts\" \"lm-tests/**/*.ts\""
  },
  "devDependencies": {
    "@commitlint/cli": "^19.5.0",
    "@commitlint/config-conventional": "^19.5.0",
    "@octokit/types": "^7.5.1",
    "@tsconfig/node18": "^18.2.4",
    "@types/diff": "^5.2.1",
    "@types/eslint__js": "^8.42.3",
    "@types/markdown-it": "^14.1.2",
    "@types/markdown-it-emoji": "^3.0.1",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.8.6",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "1.96.0",
    "esbuild": "^0.24.2",
    "eslint": "^9.13.0",
    "husky": "^9.1.6",
    "json-schema-to-typescript": "^15.0.2",
    "lint-staged": "^15.2.10",
    "lodash.escaperegexp": "^4.1.2",
    "mocha": "^11.1.0",
    "npm-run-all2": "^7.0.2",
    "prettier": "^3.3.3",
    "semantic-release": "^24.2.0",
    "semantic-release-vsce": "^6.0.6",
    "type-coverage": "^2.29.7",
    "typescript-eslint": "^8.12.2"
  },
  "dependencies": {
    "@electron/docs-parser": "^2.0.0",
    "@electron/fiddle-core": "^1.4.0",
    "@octokit/rest": "^19.0.4",
    "@vscode/prompt-tsx": "^0.3.0-alpha.20",
    "diff": "^5.0.0",
    "lru-cache": "^7.14.0",
    "markdown-it": "^14.1.0",
    "markdown-it-emoji": "^3.0.0",
    "nanoid": "^5.1.5",
    "typescript": "^4.5.5",
    "typescript-cached-transpile": "^0.0.6",
    "uuid": "^11.0.5",
    "word-wrap": "^1.2.5"
  },
  "lint-staged": {
    "*.ts": [
      "yarn prettier:write"
    ]
  }
}
